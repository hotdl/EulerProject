#coding:utf8

# Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
#
# 22=4, 23=8, 24=16, 25=32
# 32=9, 33=27, 34=81, 35=243
# 42=16, 43=64, 44=256, 45=1024
# 52=25, 53=125, 54=625, 55=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
#
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
#
# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

from common import costtime

@costtime
def calc_distinct_terms(a, b):
    dict = {} # keeps the power of num
    bLimit = int(b**0.5)
    for x in range(2, bLimit+1):
        for y in range(2, a+1):
            num = x**y
            if num > b:
                break
            if x in dict.keys():
                t = dict[x]
                x = t[0]
                y *= t[1]
            dict[num] = (x,y)

    terms = set([])
    for x in range(2, a+1):
        for y in range(2, b+1):
            if x in dict:
                t = dict[x]
                terms.add((t[0],y*t[1]))
            else:
                terms.add((x,y))
    return terms

print len(calc_distinct_terms(100, 100))

